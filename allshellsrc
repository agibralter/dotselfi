###############################################################################
# setup
###############################################################################

# Source extras.
# shellcheck disable=SC1090
if [ -f "$HOME/.bash_extras" ]; then source "$HOME/.bash_extras"; fi

# Add custom bin directory to path.
export PATH="$HOME/.bin:$PATH"

export EDITOR="vim"
export SVN_EDITOR="vim"
export GIT_EDITOR='vim'
export GEMEDITOR="vim"

__shell="$(basename "$SHELL")"

###############################################################################
# aliases
###############################################################################

alias cp="cp -i"
alias mv="mv -i"
# shellcheck disable=SC2032
alias rm="rm -i"
alias ls="ls -GF"
alias ll="ls -alGF"
alias g="git"
alias sizes="du -h -d1"
alias be="bundle exec"
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
alias killpyc="find . -name '*.pyc' -delete"
alias bip="bundle install --binstubs=.bundler_bin --path=vendor/bundle"

# Prevent annoying warning from `brew doctor` related to pyenv
# https://github.com/pyenv/pyenv/issues/106#issuecomment-440826532
alias brew='env PATH=${PATH//$(pyenv root)\/shims:/} brew'

function pstreeme() {
  pstree -aup "$(whoami)"
}

# pick!
if hash pick 2>/dev/null; then
  pickcd() { cd "$(find . -type d | pick)" || return 1; }
  pickkill() { kill "$(ps -e | awk '{if(NR!=1) { print $4, $1 }}' | pick -do | tail -n +2)" ; }
  pickhist() { history | cut -c8- | sort -u | pick ; }
fi

# ctags!
if hash ctags 2>/dev/null; then
  alias ctagit="ctags -R --exclude=.git --exclude=log --exclude=public *"
fi

# Stop the annoying ctrl-s/ctrl-q control flow mappings.
stty stop ''
stty start ''
stty -ixon
stty -ixoff

###############################################################################
# ssh stuff
###############################################################################

SOCK="/tmp/ssh-agent-$USER-screen"
if test "$SSH_AUTH_SOCK" && [ "$SSH_AUTH_SOCK" != "$SOCK" ]; then
  rm -f "/tmp/ssh-agent-$USER-screen"
  ln -sf "$SSH_AUTH_SOCK" "$SOCK"
  export SSH_AUTH_SOCK=$SOCK
fi

ssh-reagent () {
  for agent in /tmp/ssh-*/agent.*; do
    export SSH_AUTH_SOCK=$agent
    if ssh-add -l >/dev/null 2>&1; then
      echo Found working SSH Agent:
      ssh-add -l
      return
    fi
  done
  echo Cannot find ssh agent - maybe you should reconnect and forward it?
}

ssh-add -A &> /dev/null

###############################################################################
# lib setup
###############################################################################

# Heroku Toolbelt
if [ -d /usr/local/heroku/bin ]; then
  export PATH="/usr/local/heroku/bin:$PATH"
fi

if hash rbenv 2>/dev/null; then
  eval "$(rbenv init -)"
fi

# Set up pyenv
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"

  # Create a wrapper to automatically set compiler flags:
  # https://github.com/pyenv/pyenv/issues/1219#issuecomment-428793012
  function pyenv_install() {
    (
      __pyenv_readline="$(brew --prefix readline)"
      __pyenv_openssl="$(brew --prefix openssl)"
      __pyenv_cflags="-I$__pyenv_readline/include -I$__pyenv_openssl/include -I$(xcrun --show-sdk-path)/usr/include"
      __pyenv_ldflags="-L$__pyenv_readline/lib -L$__pyenv_openssl/lib"
      CFLAGS=$__pyenv_cflags
      export CFLAGS
      LDFLAGS=$__pyenv_ldflags
      export LDFLAGS
      PYTHON_CONFIGURE_OPTS="--enable-unicode=ucs2 --enable-framework" 
      export PYTHON_CONFIGURE_OPTS
      pyenv install "$@"
    )
  }
fi

# And pyenv-virtualenv
if command -v pyenv-virtualenv 1>/dev/null 2>&1; then
  eval "$(pyenv virtualenv-init -)"
fi

# Set up alacritty
if [[ -d $ALACRITTY_PATH ]]; then
  export PATH="$ALACRITTY_PATH:$PATH"
fi

# Hub
if hash hub 2>/dev/null; then
  eval "$(hub alias -s)"
fi

###############################################################################
# random functions
###############################################################################

# Usage `$gifify name-of-input-file.mov name-of-output-file.gif`
# Run on a .mov or video file.
function gifify() {
  docker run -it --rm -v "$(pwd)":/data maxogden/gifify "$1" -o "$2"
}

function cheat() {
  curl "cht.sh/$1"
}

function bbb() {
  brew update; brew upgrade; brew cleanup
}

function imdone() {
  if [[ "$#" == 0 ]]; then
    terminal-notifier -sound default -message "Done!"
  else
    "$@"

    args=''
    for i in "$@"; do
      args="$args ${i//\"/\\\"}"
    done
    
    terminal-notifier -sound default -message "Done running: $args"
  fi
}

function docker-nuke() {
  docker ps -q | xargs docker stop
  # shellcheck disable=SC2033
  docker ps -qa | xargs docker rm
  # shellcheck disable=SC2033
  docker volume ls -q | xargs docker volume rm
}

function docker-super-nuke() {
  docker-nuke
  docker images list -q | xargs docker rmi
}

function osx-reset-video() {
  sudo killall VDCAssistant
  sudo killall AppleCameraAssistant
}

if hash nodenv 2>/dev/null; then
  eval "$(nodenv init -)"
fi

# shellcheck disable=SC1090
[ -f "$HOME/.fzf.$__shell" ] && source "$HOME/.fzf.$__shell"
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

# Set up direnv (must be last thing that modifies prompt).
if hash direnv 2>/dev/null; then
	eval "$(direnv hook "$__shell")"
fi

# Must come last otherwise it breaks other things that rely on $PS1, such as
# direnv
# shellcheck disable=SC1090
source "$HOME/.iterm2_shell_integration.$__shell"

###############################################################################
# cleanup
###############################################################################
unset __shell

# vim:ft=bash:tw=0:ts=2:sw=2:noet:nolist:foldmethod=marker
