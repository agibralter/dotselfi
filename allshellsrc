# shellcheck shell=bash
###############################################################################
# setup
###############################################################################

# Source extras.
# shellcheck disable=SC1091
if [ -f "$HOME/.bash_extras" ]; then source "$HOME/.bash_extras"; fi

# Add custom bin directory to path.
export PATH="$HOME/.bin:$PATH"

# Add Homebrew sbin
eval "$(brew shellenv)"

export EDITOR="vim"

__shell="$(basename "$SHELL")"

###############################################################################
# aliases
###############################################################################

alias cp="cp -i"
alias mv="mv -i"
# shellcheck disable=SC2032
alias rm="rm -i"
alias ls="ls -GF"
alias ll="ls -alGF"
alias g="git"
alias sizes="du -h -d1"
alias be="bundle exec"
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
alias killpyc="find . -name '*.pyc' -delete"
alias bip="bundle install --binstubs=.bundler_bin --path=vendor/bundle"

function pstreeme() {
  pstree -aup "$(whoami)"
}

# pick!
if hash pick 2>/dev/null; then
  pickcd() { cd "$(find . -type d | pick)" || return 1; }
  pickkill() { kill "$(ps -e | awk '{if(NR!=1) { print $4, $1 }}' | pick -do | tail -n +2)" ; }
  pickhist() { history | cut -c8- | sort -u | pick ; }
fi

# ctags!
if hash ctags 2>/dev/null; then
  alias ctagit="ctags -R --exclude=.git --exclude=log --exclude=public *"
fi

# Stop the annoying ctrl-s/ctrl-q control flow mappings.
stty stop ''
stty start ''
stty -ixon
stty -ixoff

###############################################################################
# ssh stuff
###############################################################################

SOCK="/tmp/ssh-agent-$USER-screen"
if test "$SSH_AUTH_SOCK" && [ "$SSH_AUTH_SOCK" != "$SOCK" ]; then
  rm -f "/tmp/ssh-agent-$USER-screen"
  ln -sf "$SSH_AUTH_SOCK" "$SOCK"
  export SSH_AUTH_SOCK=$SOCK
fi

ssh-reagent () {
  for agent in /tmp/ssh-*/agent.*; do
    export SSH_AUTH_SOCK=$agent
    if ssh-add -l >/dev/null 2>&1; then
      echo Found working SSH Agent:
      ssh-add -l
      return
    fi
  done
  echo Cannot find ssh agent - maybe you should reconnect and forward it?
}

ssh-add -A &> /dev/null

###############################################################################
# lib setup
###############################################################################

# Go
export GOPATH="${HOME}/.go"
# brew --prefix is slow: https://github.com/Homebrew/brew/issues/3327
# Seems that it's slow onyl for some formulas... I wonder if it is because of
# a loop rather than a hash lookup (e.g. asdf is fast but golang is slow).
# GOROOT="$(brew --prefix golang)/libexec"
GOROOT="/usr/local/opt/go/libexec"
export GOROOT
export PATH="$PATH:${GOPATH}/bin:${GOROOT}/bin"
test -d "${GOPATH}" || mkdir "${GOPATH}"
test -d "${GOPATH}/src/github.com" || mkdir -p "${GOPATH}/src/github.com"

# Heroku Toolbelt
if [ -d /usr/local/heroku/bin ]; then
  export PATH="/usr/local/heroku/bin:$PATH"
fi

if hash rbenv 2>/dev/null; then
  eval "$(rbenv init -)"
fi

# Set up alacritty
if [[ -d $ALACRITTY_PATH ]]; then
  export PATH="$ALACRITTY_PATH:$PATH"
fi

###############################################################################
# random functions
###############################################################################

function aws-vault-use() {
  local profile output duration

  profile="$1"
  duration="$2"

  if [[ -n $duration ]]; then
    duration="--duration=$duration"
  fi

	# Avoid message about nested sessions
	unset AWS_VAULT
  
  if ! output="$(aws-vault exec "$profile" "$duration" -- env)"; then
    echo "$output" >&2
    return 1
  fi

  eval "$(echo "$output" | awk '/^AWS/ { print "export " $1 }')"
}

# Usage `$gifify name-of-input-file.mov name-of-output-file.gif`
# Run on a .mov or video file.
function gifify() {
  docker run -it --rm -v "$(pwd)":/data maxogden/gifify "$1" -o "$2"
}

function cheat() {
  curl "cht.sh/$1"
}

function bbb() {
  brew update; brew upgrade; brew cleanup
}

function imdone() {
  if [[ "$#" == 0 ]]; then
    terminal-notifier -sound default -message "Done!"
  else
    "$@"

    args=''
    for i in "$@"; do
      args="$args ${i//\"/\\\"}"
    done
    terminal-notifier -sound default -message "Done running: $args"
  fi
}

function docker-nuke() {
  docker ps -q | xargs docker stop
  # shellcheck disable=SC2033
  docker ps -qa | xargs docker rm
  # shellcheck disable=SC2033
  docker volume ls -q | xargs docker volume rm
}

function docker-super-nuke() {
  docker-nuke
  docker images list -q | xargs docker rmi
}

function osx-reset-video() {
  sudo killall VDCAssistant
  sudo killall AppleCameraAssistant
}

# fd - cd to selected directory
fcd() {
  local dir
  dir=$(find "${1:-.}" -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) && cd "$dir" || return
}

# fh - search in your command history and execute selected command
fh() {
	# shellcheck disable=SC2015
  eval "$( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')"
}

# ch - browse chrome history
ch() {
  local cols sep
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Profile\ 1/History /tmp/h

  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs open
}

if hash nodenv 2>/dev/null; then
  eval "$(nodenv init -)"
fi

# shellcheck disable=SC1090
[ -f "$HOME/.fzf.$__shell" ] && source "$HOME/.fzf.$__shell"
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

# Set up asdf

__asdf_prefix="/usr/local/opt/asdf"
# __asdf_prefix=$(brew --prefix asdf)
[ -f "$__asdf_prefix/asdf.sh" ] && source "$__asdf_prefix/asdf.sh"
unset __asdf_prefix

# Set up direnv (must be last thing that modifies prompt).
if hash direnv 2>/dev/null; then
	eval "$(direnv hook "$__shell")"
fi

###############################################################################
# cleanup
###############################################################################
unset __shell

# vim:ft=bash:tw=0:ts=2:sw=2:noet:nolist:foldmethod=marker
